% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyMS_SaitExpress.R
\name{add_protein_lengths}
\alias{add_protein_lengths}
\alias{protein_2localSaint}
\alias{runSaint}
\title{Add protein lengths from fasta file to data frame (id_col - protein id column.)}
\usage{
add_protein_lengths(intdata, fasta, id_col = "protein_Id")

protein_2localSaint(
  xx,
  quantcolumn = "mq.protein.intensity",
  proteinID = "protein_Id",
  geneNames = proteinID,
  proteinLength = "protein.length",
  IP_name = "raw.file",
  baitCol = "bait",
  CorTCol = "CorT"
)

runSaint(si, filedir = getwd(), spc = TRUE, CLEANUP = TRUE)
}
\arguments{
\item{intdata}{data.frame}

\item{fasta}{list of sequences created with \code{\link[seqinr]{read.fasta}}}

\item{id_col}{column with protein ids/accessions.}

\item{xx}{data.frame in long format}

\item{quantcolumn}{intensity column}

\item{proteinID}{protein accession}

\item{geneNames}{column with gene names}

\item{proteinLength}{column with protein lengths}

\item{IP_name}{raw.file}

\item{baitCol}{column with bait definition (condition)}

\item{CorTCol}{is it control or TRUE (SaintExpress speach)}

\item{si}{output of protein_2localSaint function}

\item{filedir}{where to store the saint express inputs}

\item{spc}{if TRUE spectum counts if FALSE intensities (see SaintExpress documentation for more details)}

\item{CLEANUP}{TRUE remove all files generated bySaintExpress.}
}
\description{
Add protein lengths from fasta file to data frame (id_col - protein id column.)

Convert tidy table with protein quants into SaintExpress compatible inputs

Network visualization.
look at https://www.jessesadler.com/post/network-analysis-with-r/
https://fgcz-intranet.uzh.ch/tiki-index.php?page=WG_APMSnProximityLabeling
}
\examples{

bb <- prolfqua_data("data_IonstarProtein_subsetNorm")
bb$config <- old2new(config = bb$config$clone(deep = TRUE))
xx <- LFQData$new(bb$data, bb$config)
exampleDat <- xx$data |> dplyr::mutate(CorT = dplyr::case_when(dilution. == "a" ~ "C", TRUE ~ "T"))
# sample protein lengths

tmp <- data.frame(protein_Id = unique(exampleDat$protein_Id))
tmp$proteinLength <- as.integer(runif(nrow(tmp), min = 150, max = 2500))
exampleDat <- dplyr::inner_join(tmp, exampleDat)
# undebug(protein_2localSaint)
res <- protein_2localSaint(exampleDat,
  quantcolumn = "medpolish",
  proteinID = "protein_Id",
  proteinLength = "proteinLength",
  IP_name = "raw.file",
  baitCol = "dilution.",
  CorTCol = "CorT"
)

stopifnot(names(res) == c("inter", "prey", "bait"))
if (!Sys.info()["sysname"] == "Darwin") {
  data_SAINTe_output <- runSaint(res, filedir = tempdir())
  # usethis::use_data(data_SAINTe_output)
} else {
  testthat::expect_error(runSaint(res, filedir = tempdir()))
}

}
