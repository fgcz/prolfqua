% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LFQDataTransformer.R
\name{LFQDataTransformer}
\alias{LFQDataTransformer}
\title{Decorate LFQData with Methods for transforming Intensities}
\description{
Decorate LFQData with Methods for transforming Intensities

Decorate LFQData with Methods for transforming Intensities
}
\examples{

istar <- prolfqua_data('data_ionstar')$filtered()
istar$config <- old2new(istar$config)
data <- istar$data |> dplyr::filter(protein_Id \%in\% sample(protein_Id, 100))
lfqdata <- LFQData$new(data, istar$config)

lfqcopy <- lfqdata$get_copy()
lfqTrans <- lfqcopy$get_Transformer()

x <- lfqTrans$intensity_array(log2)
x$lfq$config$table$is_response_transformed
x <- x$intensity_matrix(robust_scale)
plotter <- x$lfq$get_Plotter()
plotter$intensity_distribution_density()

# transform by asinh root and scale

lfqcopy <- lfqdata$get_copy()
lfqTrans <- lfqcopy$get_Transformer()
x <- lfqTrans$intensity_array(asinh)
mads1 <- mean(x$get_scales()$mads)
x <- lfqTrans$intensity_matrix(robust_scale, force = TRUE)
mads2 <- mean(x$get_scales()$mads)

stopifnot(abs(mads1 - mads2) < 1e-8)


stopifnot(abs(mean(x$get_scales()$medians)) < 1e-8)
lfqcopy <- lfqdata$get_copy()
lfqTrans <- lfqcopy$get_Transformer()
lfqTrans$log2()
before <- lfqTrans$get_scales()
lfqTrans$robscale()
after <- lfqTrans$get_scales()
stopifnot(abs(mean(before$medians) - mean(after$medians)) < 1e-8)
stopifnot(abs(mean(before$mads) - mean(after$mads)) < 1e-8)

# normalize data using vsn
lfqcopy <- lfqdata$get_copy()
lfqTrans <- lfqcopy$get_Transformer()
lfqTransCheck <- lfqcopy$get_Transformer()

lfqTransCheck$log2()
lfqTransCheck$get_scales()
lfqTransCheck$lfq$get_Plotter()$intensity_distribution_density()

if(require("vsn")){
 res <- lfqTrans$intensity_matrix( .func = vsn::justvsn)
 res$lfq$get_Plotter()$intensity_distribution_density()
 res$get_scales()
}
if(require("preprocessCore")){
quant <- function(y){
 ynorm <- preprocessCore::normalize.quantiles(y)
 rownames(ynorm) <- rownames(y)
 colnames(ynorm) <- colnames(y)
 return(ynorm)
}
 res <- lfqTrans$intensity_matrix( .func = quant)
 res$lfq$get_Plotter()$intensity_distribution_density()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{lfq}}{LFQData object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LFQDataTransformer-new}{\code{LFQDataTransformer$new()}}
\item \href{#method-LFQDataTransformer-log2}{\code{LFQDataTransformer$log2()}}
\item \href{#method-LFQDataTransformer-get_scales}{\code{LFQDataTransformer$get_scales()}}
\item \href{#method-LFQDataTransformer-robscale}{\code{LFQDataTransformer$robscale()}}
\item \href{#method-LFQDataTransformer-robscale_subset}{\code{LFQDataTransformer$robscale_subset()}}
\item \href{#method-LFQDataTransformer-intensity_array}{\code{LFQDataTransformer$intensity_array()}}
\item \href{#method-LFQDataTransformer-intensity_matrix}{\code{LFQDataTransformer$intensity_matrix()}}
\item \href{#method-LFQDataTransformer-clone}{\code{LFQDataTransformer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-new"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-new}{}}}
\subsection{Method \code{new()}}{
initialize
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$new(lfqdata)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lfqdata}}{LFQData object to transform}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-log2"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-log2}{}}}
\subsection{Method \code{log2()}}{
log2 transform data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$log2(force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{force}}{if FALSE, then data already log2 transformed will not be transformed a second time. TRUE force log transformation.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LFQDataTransformer
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-get_scales"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-get_scales}{}}}
\subsection{Method \code{get_scales()}}{
get mean and variance and standard deviation in each sample
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$get_scales()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list with means and mads
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-robscale"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-robscale}{}}}
\subsection{Method \code{robscale()}}{
robust scale data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$robscale(
  preserveMean = TRUE,
  colname = "transformedIntensity"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{preserveMean}}{should original mean value be preserved TRUE, if FALSE then center at zero}

\item{\code{colname}}{new name of transformed column}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LFQDataTransformer (self)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-robscale_subset"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-robscale_subset}{}}}
\subsection{Method \code{robscale_subset()}}{
log2 transform and robust scale data based on subset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$robscale_subset(
  lfqsubset,
  preserveMean = TRUE,
  colname = "transformedIntensity"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lfqsubset}}{LFQData subset to use for normalization}

\item{\code{preserveMean}}{should original mean value be preserved TRUE, if FALSE then center at zero}

\item{\code{colname}}{- how to name the transformed intensities, default transformedIntensity}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LFQDataTransformer (self)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-intensity_array"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-intensity_array}{}}}
\subsection{Method \code{intensity_array()}}{
Transforms intensities
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$intensity_array(.func = log2, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.func}}{transformation function working with arrays e.g. log2, log10, asinh etc.}

\item{\code{force}}{transformation on already transformed data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LFQDataTransformer (self)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-intensity_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-intensity_matrix}{}}}
\subsection{Method \code{intensity_matrix()}}{
pass a function which works with matrices, e.g., vsn::justvsn
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$intensity_matrix(.func = robust_scale, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.func}}{any function taking a matrix and returning a matrix (columns sample, rows feature e.g. base::scale) default robust_scale}

\item{\code{force}}{transformation on data already transformed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
LFQDataTransformer (self)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LFQDataTransformer-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LFQDataTransformer-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LFQDataTransformer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
